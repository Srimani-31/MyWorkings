In JavaScript, you can create modules by encapsulating related code and data into a single reusable unit. Modules help you organize and structure your code, making it more maintainable and easier to work with. There are several ways to create modules in JavaScript, and I'll explain two common methods:

1. **CommonJS Modules (Node.js)**:

   If you're working with Node.js or using a bundler like Webpack or Browserify, you can use CommonJS modules. Here's how to create a module in Node.js:

   **Module file (e.g., `myModule.js`):**

   ```javascript
   // Define functions, variables, or objects to export
   function sayHello() {
     console.log("Hello!");
   }

   function add(a, b) {
     return a + b;
   }

   // Export what you want to make accessible to other modules
   module.exports = {
     sayHello,
     add,
   };
   ```

   **Usage in another file (e.g., `main.js`):**

   ```javascript
   // Import the module
   const myModule = require('./myModule');

   // Use functions or variables from the module
   myModule.sayHello(); // Output: "Hello!"
   const result = myModule.add(2, 3); // result = 5
   ```

2. **ES6 Modules (Browser, Modern JavaScript)**:

   Modern JavaScript, including ES6 and later versions, introduced native support for modules in browsers and Node.js. Here's how to create a module using ES6 modules:

   **Module file (e.g., `myModule.js`):**

   ```javascript
   // Export functions, variables, or objects using the 'export' keyword
   export function sayHello() {
     console.log("Hello!");
   }

   export function add(a, b) {
     return a + b;
   }
   ```

   **Usage in another file (e.g., `main.js`):**

   ```javascript
   // Import the module using the 'import' keyword
   import * as myModule from './myModule';

   // Use functions or variables from the module
   myModule.sayHello(); // Output: "Hello!"
   const result = myModule.add(2, 3); // result = 5
   ```

   Note that ES6 modules require using a modern JavaScript environment that supports ES6 module syntax. Browsers and newer versions of Node.js support ES6 modules.

Choose the module system that best suits your project and environment. Both CommonJS and ES6 modules allow you to encapsulate and reuse code effectively while promoting a modular and maintainable codebase.